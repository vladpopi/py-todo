#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import sys
import pickle
from pathlib import Path
from datetime import datetime

class TodoItem:
    def __init__(self, title, exp_date=None):
        self.title = title
        self.exp_date = exp_date
        
    def __str__(self):
        if self.exp_date is None:
            return self.title
        else:
            days_left = (self.exp_date - datetime.now()).days
            
            if days_left > 0:
                return self.title + " ({days_left} zi{le} ramase)".format(
                    days_left=days_left, s="s" if days_left >= 2 else "")
            elif days_left == 0:
                return self.title + " (Maine)"
            elif days_left == -1:
                return self.title + " (Azi)"
            else:
                return self.title + " (!!!!!)"


datafile_location = str(Path.home()) + '/.local/share/py-todo/'
datafile_name = 'todo.dat'
items = []

def add_item(title: str, exp_date: datetime):
    items.append(TodoItem(title, exp_date))

def remove_item(index: int):
    del items[index]

def list_items():
    if len(items) > 0:
        print("Ai {item_count} porcarii pe care trebuie sa le faci".format(
            item_count=len(items), s="s" if len(items) >= 2 else ""))
        index = 0
        for item in items:
            print(str(index) + ") " + item.__str__())
            index += 1

def print_usage():
    print("")
    print("HALP: ." + sys.argv[0] + " <argument>")
    print("-a --add                 -- Adauga element nou")
    print("-r --remove <index>      -- Sterge un element")
    print("-l --list                -- Listeaza elementele")
    print()
    print("-h --help                -- HALP")
    print("-v --version             -- Versiune")



if __name__ == '__main__':

    Path(datafile_location).mkdir(parents=True, exist_ok=True)


    try:
        with open(datafile_location + datafile_name, 'rb') as f:
            items = pickle.load(f)
    except:
        pass


    if len(sys.argv) <= 1:
        list_items()
        
    elif sys.argv[1] == '-a' or sys.argv[1] == '--add':
        title = input("Titlu: ")
        exp_date = input("Data expirarii (YYYY/MM/DD) (Optional): ")
        
        if exp_date == '':
            exp_date = None
        else:
            try:
                exp_date = datetime(*map(int, exp_date.split('/')))
            except:
                print("baga data bine ")
                sys.exit()
        
        add_item(title, exp_date)
        list_items()
        
    elif sys.argv[1] == '-r' or sys.argv[1] == '--remove':
        if len(sys.argv) >= 3:
            try:
                remove_item(int(sys.argv[2]))
                print("S-a sters " + sys.argv[2] + "\n")
                list_items()
            except:
                print("Nu exista elementul")
        else:
            print_usage()
        
    elif sys.argv[1] == '-l' or sys.argv[1] == '--list':
        list_items()
        
    elif sys.argv[1] == '-v' or sys.argv[1] == '--version':
        print_version()

    else:
        print_usage()


    with open(datafile_location + datafile_name, 'wb') as f:
        pickle.dump(items, f)
